#!/usr/bin/env python

import os
import sys
import datetime

file_dir = os.path.abspath(os.path.realpath(os.path.dirname(__file__)))
paths = (
    os.path.normpath(file_dir + "/.."),
    os.path.normpath(file_dir + "/../.."),
    os.path.normpath(file_dir + "/../commonlib/pylib"),
)
for path in paths:
    sys.path.append(path)
os.environ['DJANGO_SETTINGS_MODULE'] = 'barnetplanning.settings'

import urllib2
import simplejson

from django.contrib.gis.measure import Distance

import mysociety.config
from alerts.models import Alert
from applications.models import Application
from emailconfirmation.utils import send_email
from static_texts.models import StaticText

# Make a dictionary of ward name to id
mapit_response = urllib2.urlopen("http://mapit.mysociety.org/area/2489/children.json")
mapit_data = simplejson.load(mapit_response)

# A dictionary of ward ids to ward names.
ward_name_lookup_dict = dict([(int(value), mapit_data[value]['name']) for value in mapit_data])

last_week = datetime.datetime.today() - datetime.timedelta(days=7)

for alert in Alert.objects.filter(confirmed__confirmed=True):
    applications_qs = Application.objects.exclude(alert=alert.id).filter(created__gt=last_week)

    if alert.location:
        # This is a postcode alert
        applications = applications_qs.filter(
            location__distance_lte=(alert.location, Distance(m=alert.radius))
            )
        email_subject = 'New planning applications near %s' %alert.postcode

    elif alert.ward_mapit_id:
        # This is an alert by ward_id
        applications = applications_qs.filter(ward_mapit_id=alert.ward_mapit_id)
        email_subject = 'New planning applications in %s' %ward_name_lookup_dict[alert.ward_mapit_id]

    if applications:
        unsubscribe_url = '%s%s' % (mysociety.config.get('BASE_URL'), alert.confirmed.all()[0].path_for_unsubscribe())
        send_email(
            None,
            email_subject,
            'email-alert.txt',
            {
                'applications': applications,
                'alert': alert,
                'text': StaticText.objects.get(place='email-alert').text,
                'unsubscribe_url': unsubscribe_url
            },
            alert.email,
        )
        alert.applications.add(*list(applications))
